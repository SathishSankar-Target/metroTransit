{"version":3,"sources":["apiCalls.js","departureList.js","App.js","serviceWorker.js","index.js"],"names":["fetchApi","query","fetch","then","response","json","data","catch","error","console","DepartureList","props","showMoreDeparture","state","departureCountToShow","setState","departureList","Departures","length","departureExpanded","timeDiff","departTime","Date","this","className","undefined","Stop","Description","StopId","role","slice","map","departure","key","BlockNumber","RouteId","DepartureTime","DepartureText","onClick","Component","App","handleRoutChange","event","value","target","showDirection","direction","selectedRoute","showStop","showDepartureList","handleDirectionChange","stop","selectedDirection","handleStopChange","selectedStop","updateDepartureData","bind","routes","showRouteSelection","showStopSelection","setInterval","routeData","directionData","stopData","onChange","e","route","DirectionId","DirectionName","PlaceCode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.59face33.chunk.js","sourcesContent":["export const fetchApi = (query) => {\n    const queryUrl = 'https://svc.metrotransit.org/nextripv2/'+query\n    return fetch(queryUrl).then(response => response.json())\n    .then(data => {\n        return data\n    })\n    .catch(error => {\n        console.error(error);\n        return error\n    })\n}","import React , { Component }from 'react';\nimport './App.css';\n\n\nclass DepartureList extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      departureCountToShow: 3,\n      departureExpanded: false,\n    }\n  }\n  \n  // onClick method to expand/colapse to show more/less departure list when the list length is more than 3\n  showMoreDeparture = () => {\n    if(this.state.departureCountToShow === 3 ){\n      this.setState({ departureCountToShow: this.props.departureList.Departures.length, departureExpanded: true })\n    } else {\n      this.setState({ departureCountToShow: 3, departureExpanded: false })\n    }\n  }\n\n  timeDiff = (departTime) => {\n\t  return ((new Date(departTime) -new Date()) < 5*60*1000)\n  }\n\n  render() {\n\t\tconst departureList = this.props.departureList\n    return (\n\t\t\t<div className=\"departure-container\">\n\t\t\t\t{ (departureList.Stop !== undefined && departureList.Departures !== undefined) ?\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<div className=\"departure\">\n\t\t\t\t\t\t\t<h2 className=\"departure-title\">Departures</h2>\n\t\t\t\t\t\t\t<div className=\"stop-description\">\n\t\t\t\t\t\t\t\t<div>{departureList.Stop.Description}</div>\n\t\t\t\t\t\t\t\t<div>Stop {departureList.Stop.StopId}</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div role='list'>\n\t\t\t\t\t\t\t{departureList.Departures.slice(0, this.state.departureCountToShow).map(departure => {\n\t\t\t\t\t\t\treturn <div className=\"departure-list\" key={departure.BlockNumber}>\n\t\t\t\t\t\t\t\t\t<div className=\"route-discription\">\n\t\t\t\t\t\t\t\t\t<span className=\"route-id\"><strong>{departure.RouteId}</strong></span>\n\t\t\t\t\t\t\t\t\t<span>{departure.Description}</span>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div className=\"depart-time\">\n\t\t\t\t\t\t\t\t\t{this.timeDiff(departure.DepartureTime) && <span className=\"blink\"></span>}\n\t\t\t\t\t\t\t\t\t\t<strong>{departure.DepartureText}</strong>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{/* show more/less departure list button */}\n\t\t\t\t\t\t{ departureList.Departures.length > 3 && \n\t\t\t\t\t\t\t<button className=\"show-more-button\" onClick={this.showMoreDeparture}>\n\t\t\t\t\t\t\t<span className={this.state.departureExpanded ? 'expand': 'colapsed'}></span>\n\t\t\t\t\t\t\tShow {this.state.departureExpanded ? 'less' : 'more' } departure time\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t\t:\n\t\t\t\t\t// Error message in case of any api service fails or wrong data passed\n\t\t\t\t\t<div>We are unable to get the desired direction for your select, Kindly try chaning the option for the route, direction and stop</div>\n\t\t\t\t}\n\t\t\t</div>\n\t\t)\n\t}\n}\n        \n\nexport default DepartureList\n","import React , { Component }from 'react';\nimport './App.css';\nimport {fetchApi} from './apiCalls'\nimport DepartureList from './departureList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.updateDepartureData = this.updateDepartureData.bind(this)\n    this.state = {\n      routes : [],\n      selectedRoute: '',\n      direction: [],\n      selectedDirection: '',\n      stop: [],\n      selectedStop: '',\n      showDirection: false,\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n      showRouteSelection: true,\n      showStopSelection: false\n    }\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => this.setState({routes :routes }))\n    setInterval(this.updateDepartureData, 60000)\n  }\n  // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n  async updateDepartureData() {\n    if(this.state.selectedRoute !== '' && this.state.selectedDirection !== '' && this.state.selectedStop !== '') {\n      const query = this.state.selectedRoute+'/'+this.state.selectedDirection+'/'+this.state.selectedStop\n      fetchApi(query).then(departureList => this.setState({departureList: departureList}))\n    }\n  }\n\n  // Makes the call to get the direction select box data and set/change some default state values\n  handleRoutChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showDirection: false,\n      direction: [],\n      selectedRoute:'',\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select route') {\n      fetchApi('directions/'+value)\n      .then(direction => this.setState({direction :direction, showDirection: true, selectedRoute: value }))\n    } \n  }\n\n  // Makes the call to get the stop select box data and set/change some default state values\n  handleDirectionChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showStop: false,\n      stop: [],\n      selectedDirection: '',\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select direction') {\n      fetchApi('stops/'+this.state.selectedRoute+'/'+value)\n      .then(direction => this.setState({stop :direction, showStop: true, selectedDirection: value }))\n    } \n  }\n\n  // Makes the call to get the list departure data and set/change some default state values\n  handleStopChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showDepartureList: false,\n      departureList: []\n    })\n    if (value !== 'Select stop') {\n      fetchApi(this.state.selectedRoute+'/'+this.state.selectedDirection+'/'+value)\n      .then(departureList => this.setState({departureList: departureList, showDepartureList: true, selectedStop: value}))\n    } \n  }\n\n  render() {\n    const state = this.state\n    const routeData = state.routes \n    const directionData = state.direction\n    const stopData = state.stop\n    const departureList = state.departureList\n    // const { routeData, directionData, stopData, departureList } = state\n    return (\n      <div className=\"App\">\n        <h2 className=\"page-title\">Real-time Departures</h2>\n        <div className=\"select-box-container\">\n        {/* Select the route select box */}\n        { routeData.length ? \n          <select className=\"select-box\" onChange={(e) => this.handleRoutChange(e)}>\n            <option>Select route</option>\n            { routeData.map(route => <option key={route.RouteId} value={route.RouteId}>{route.Description}</option>)}\n          </select> :\n          <div>We are unable to get the desired route option for you to select, Kindly try again after some time</div> }\n        {/* Select the direction select box */}\n        { (state.showDirection && directionData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleDirectionChange(e)}>\n            <option>Select direction</option>\n            { directionData.map(direction => <option key={direction.DirectionId} value={direction.DirectionId}>{direction.DirectionName}</option>)}\n          </select>\n        }\n        {/* Select the stop select box */}\n        { (state.showStop && stopData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleStopChange(e)}>\n            <option>Select stop</option>\n            { stopData.map(stop => <option key={stop.PlaceCode} value={stop.PlaceCode}>{stop.Description}</option>)}\n          </select>\n        }\n        </div>\n        {/* Departure list along with the stop description and stop id */}\n        { state.showDepartureList && <DepartureList departureList = {departureList} /> }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}