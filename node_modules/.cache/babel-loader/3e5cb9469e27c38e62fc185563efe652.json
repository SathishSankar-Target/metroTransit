{"ast":null,"code":"var _jsxFileName = \"/Users/a6002489/Desktop/Sathish/caseStudy/metroTransit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { onLoadRouteAction, routeChangeAction, directionChangeAction, stopChangeAction } from './action/simpleAction';\nimport { getMetro } from './duck/metroDuck';\nimport './App.css';\nimport { fetchApi } from './apiCalls';\nimport DepartureList from './departureList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleRoutChange = event => {\n      let value = event.target.value;\n      this.props.routeChangeAction({\n        showDirection: false,\n        direction: [],\n        selectedRoute: '',\n        stop: [],\n        showStop: false,\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select route') {\n        fetchApi('directions/' + value).then(direction => {\n          this.props.routeChangeAction({\n            direction: direction,\n            showDirection: true,\n            selectedRoute: value\n          });\n        });\n      }\n    };\n\n    this.handleDirectionChange = event => {\n      let value = event.target.value;\n      this.props.directionChangeAction({\n        showStop: false,\n        stop: [],\n        selectedDirection: '',\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select direction') {\n        fetchApi('stops/' + this.props.selectedRoute + '/' + value).then(stop => {\n          this.props.directionChangeAction({\n            stop: stop,\n            showStop: true,\n            selectedDirection: value\n          });\n        });\n      }\n    };\n\n    this.handleStopChange = event => {\n      let value = event.target.value;\n      this.props.stopChangeAction({\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select stop') {\n        fetchApi(this.props.selectedRoute + '/' + this.props.selectedDirection + '/' + value).then(departureList => {\n          this.props.stopChangeAction({\n            departureList: departureList,\n            showDepartureList: true,\n            selectedStop: value\n          });\n        });\n      }\n    };\n\n    this.updateDepartureData = this.updateDepartureData.bind(this);\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => {\n      this.props.onLoadRouteData(routes);\n      this.setState({\n        routes: routes\n      });\n    });\n    setInterval(this.updateDepartureData, 60000);\n  } // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n\n\n  async updateDepartureData() {\n    if (this.props.selectedRoute !== '' && this.props.selectedDirection !== '' && this.props.selectedStop !== '') {\n      const query = this.props.selectedRoute + '/' + this.props.selectedDirection + '/' + this.props.selectedStop;\n      fetchApi(query).then(departureList => this.setState({\n        departureList: departureList\n      }));\n    }\n  } // Makes the call to get the direction select box data and set/change some default state values\n\n\n  render() {\n    const _this$props = this.props,\n          routeData = _this$props.routeData,\n          directionData = _this$props.directionData,\n          stopData = _this$props.stopData,\n          showDepartureList = _this$props.showDepartureList,\n          departureList = _this$props.departureList,\n          showStop = _this$props.showStop,\n          showDirection = _this$props.showDirection;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Real-time Departures\"), React.createElement(\"div\", {\n      className: \"select-box-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, routeData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleRoutChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Select route\"), routeData.map(route => React.createElement(\"option\", {\n      key: route.RouteId,\n      value: route.RouteId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, route.Description))), showDirection && directionData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleDirectionChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Select direction\"), directionData.map(direction => React.createElement(\"option\", {\n      key: direction.DirectionId,\n      value: direction.DirectionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, direction.DirectionName))), showStop && stopData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleStopChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Select stop\"), stopData.map(stop => React.createElement(\"option\", {\n      key: stop.PlaceCode,\n      value: stop.PlaceCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, stop.Description)))), showDepartureList && React.createElement(DepartureList, {\n      departureList: departureList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport const mapStateToProps = state => {\n  const metroData = getMetro(state);\n  console.log(metroData);\n  return {\n    routeData: metroData.routeData,\n    directionData: metroData.directionData,\n    stopData: metroData.stopData,\n    showDepartureList: metroData.showDepartureList,\n    departureList: metroData.departureData,\n    showStop: metroData.showStop,\n    showDirection: metroData.showDirection,\n    showRouteSelection: metroData.showRouteSelection\n  };\n};\nexport const mapDispatchToProps = dispatch => ({\n  onLoadRouteData: routes => dispatch(onLoadRouteAction(routes)),\n  routeChangeAction: directionData => dispatch(routeChangeAction(directionData)),\n  directionChangeAction: stopData => dispatch(directionChangeAction(stopData)),\n  stopChangeAction: departureData => dispatch(stopChangeAction(departureData))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/a6002489/Desktop/Sathish/caseStudy/metroTransit/src/App.js"],"names":["React","Component","connect","onLoadRouteAction","routeChangeAction","directionChangeAction","stopChangeAction","getMetro","fetchApi","DepartureList","App","constructor","props","handleRoutChange","event","value","target","showDirection","direction","selectedRoute","stop","showStop","departureList","showDepartureList","then","handleDirectionChange","selectedDirection","handleStopChange","selectedStop","updateDepartureData","bind","componentDidMount","routes","onLoadRouteData","setState","setInterval","query","render","routeData","directionData","stopData","e","map","route","RouteId","Description","DirectionId","DirectionName","PlaceCode","mapStateToProps","state","metroData","console","log","departureData","showRouteSelection","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , { Component }from 'react';\nimport { connect } from 'react-redux';\nimport { onLoadRouteAction, routeChangeAction, directionChangeAction, stopChangeAction } from './action/simpleAction';\nimport {getMetro} from './duck/metroDuck'\nimport './App.css';\nimport {fetchApi} from './apiCalls'\nimport DepartureList from './departureList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.updateDepartureData = this.updateDepartureData.bind(this)\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => {\n      this.props.onLoadRouteData(routes)\n      this.setState({routes :routes })\n    } )\n    setInterval(this.updateDepartureData, 60000)\n  }\n  // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n  async updateDepartureData() {\n    if(this.props.selectedRoute !== '' && this.props.selectedDirection !== '' && this.props.selectedStop !== '') {\n      const query = this.props.selectedRoute+'/'+this.props.selectedDirection+'/'+this.props.selectedStop\n      fetchApi(query).then(departureList => this.setState({departureList: departureList}))\n    }\n  }\n\n  // Makes the call to get the direction select box data and set/change some default state values\n  handleRoutChange = (event) => {\n    let value = event.target.value\n    this.props.routeChangeAction({\n      showDirection: false,\n      direction: [],\n      selectedRoute:'',\n      stop:[],\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select route') {\n      fetchApi('directions/'+value)\n      .then(direction => {\n        this.props.routeChangeAction({direction :direction, showDirection: true, selectedRoute: value })\n      })\n    } \n  }\n\n  // Makes the call to get the stop select box data and set/change some default state values\n  handleDirectionChange = (event) => {\n    let value = event.target.value\n    this.props.directionChangeAction({\n      showStop: false,\n      stop: [],\n      selectedDirection: '',\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select direction') {\n      fetchApi('stops/'+this.props.selectedRoute+'/'+value)\n      .then(stop => {\n        this.props.directionChangeAction({stop :stop, showStop: true, selectedDirection: value })\n      })\n    } \n  }\n\n  // Makes the call to get the list departure data and set/change some default state values\n  handleStopChange = (event) => {\n    let value = event.target.value\n    this.props.stopChangeAction({departureList: [], showDepartureList: false})\n    if (value !== 'Select stop') {\n      fetchApi(this.props.selectedRoute+'/'+this.props.selectedDirection+'/'+value)\n      .then(departureList => {\n        this.props.stopChangeAction({departureList: departureList, showDepartureList: true, selectedStop: value})\n      })\n    } \n  }\n\n  render() {\n    const { routeData, directionData, stopData, showDepartureList, departureList, showStop, showDirection } = this.props\n    return (\n      <div className=\"App\">\n        <h2 className=\"page-title\">Real-time Departures</h2>\n        <div className=\"select-box-container\">\n        {/* Select the route select box */}\n        { routeData && \n          <select className=\"select-box\" onChange={(e) => this.handleRoutChange(e)}>\n            <option>Select route</option>\n            { routeData.map(route => <option key={route.RouteId} value={route.RouteId}>{route.Description}</option>)}\n          </select> }\n        {/* Select the direction select box */}\n        { (showDirection && directionData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleDirectionChange(e)}>\n            <option>Select direction</option>\n            { directionData.map(direction => <option key={direction.DirectionId} value={direction.DirectionId}>{direction.DirectionName}</option>)}\n          </select>\n        }\n        {/* Select the stop select box */}\n        { (showStop && stopData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleStopChange(e)}>\n            <option>Select stop</option>\n            { stopData.map(stop => <option key={stop.PlaceCode} value={stop.PlaceCode}>{stop.Description}</option>)}\n          </select>\n        }\n        </div>\n        {/* Departure list along with the stop description and stop id */}\n        { showDepartureList && <DepartureList departureList = {departureList} /> }\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = state => {\n  const metroData = getMetro(state)\n  console.log(metroData)\n  return {\n    routeData: metroData.routeData,\n    directionData: metroData.directionData,\n    stopData: metroData.stopData,\n    showDepartureList: metroData.showDepartureList,\n    departureList:metroData.departureData,\n    showStop: metroData.showStop,\n    showDirection: metroData.showDirection,\n    showRouteSelection: metroData.showRouteSelection\n }\n}\n\nexport const mapDispatchToProps = dispatch => ({\n  onLoadRouteData: (routes) => dispatch(onLoadRouteAction(routes)),\n  routeChangeAction: (directionData) => dispatch(routeChangeAction(directionData)),\n  directionChangeAction: (stopData) => dispatch(directionChangeAction(stopData)),\n  stopChangeAction: (departureData) => dispatch(stopChangeAction(departureData))\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}