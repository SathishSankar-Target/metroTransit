{"ast":null,"code":"var _jsxFileName = \"/Users/a6002489/Desktop/Sathish/caseStudy/metroTransit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { onLoadRouteAction, routeChangeAction, directionChangeAction, stopChangeAction } from './action/simpleAction';\nimport { getMetro } from './duck/metroDuck';\nimport './App.css';\nimport { fetchApi } from './apiCalls';\nimport DepartureList from './departureList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleRoutChange = event => {\n      let value = event.target.value;\n      this.setState({\n        showDirection: false,\n        direction: [],\n        selectedRoute: '',\n        showStop: false,\n        departureList: [],\n        showDepartureList: false\n      });\n      this.props.routeChangeAction({\n        showDirection: false,\n        direction: [],\n        selectedRoute: '',\n        stop: [],\n        showStop: false,\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select route') {\n        fetchApi('directions/' + value).then(direction => {\n          this.props.routeChangeAction({\n            direction: direction,\n            showDirection: true,\n            selectedRoute: value\n          });\n          this.setState({\n            direction: direction,\n            showDirection: true,\n            selectedRoute: value\n          });\n        });\n      }\n    };\n\n    this.handleDirectionChange = event => {\n      let value = event.target.value;\n      this.setState({\n        showStop: false,\n        stop: [],\n        selectedDirection: '',\n        departureList: [],\n        showDepartureList: false\n      });\n      this.props.directionChangeAction({\n        showStop: false,\n        stop: [],\n        selectedDirection: '',\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select direction') {\n        fetchApi('stops/' + this.state.selectedRoute + '/' + value).then(stop => {\n          this.props.directionChangeAction({\n            stop: stop,\n            showStop: true,\n            selectedDirection: value\n          });\n          this.setState({\n            stop: stop,\n            showStop: true,\n            selectedDirection: value\n          });\n        });\n      }\n    };\n\n    this.handleStopChange = event => {\n      let value = event.target.value;\n      this.setState({\n        showDepartureList: false,\n        departureList: []\n      });\n      this.props.stopChangeAction({\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select stop') {\n        fetchApi(this.state.selectedRoute + '/' + this.state.selectedDirection + '/' + value).then(departureList => {\n          this.props.stopChangeAction({\n            departureList: departureList,\n            showDepartureList: true,\n            selectedStop: value\n          });\n          this.setState({\n            departureList: departureList,\n            showDepartureList: true,\n            selectedStop: value\n          });\n        });\n      }\n    };\n\n    this.updateDepartureData = this.updateDepartureData.bind(this);\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => {\n      this.props.onLoadRouteData(routes);\n      this.setState({\n        routes: routes\n      });\n    });\n    setInterval(this.updateDepartureData, 60000);\n  } // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n\n\n  async updateDepartureData() {\n    if (this.state.selectedRoute !== '' && this.state.selectedDirection !== '' && this.state.selectedStop !== '') {\n      const query = this.state.selectedRoute + '/' + this.state.selectedDirection + '/' + this.state.selectedStop;\n      fetchApi(query).then(departureList => this.setState({\n        departureList: departureList\n      }));\n    }\n  } // Makes the call to get the direction select box data and set/change some default state values\n\n\n  render() {\n    // const state = this.state\n    // const routeData = state.routes\n    // const directionData = state.direction\n    // const stopData = state.stop\n    // const departureList = state.departureList\n    const _this$props = this.props,\n          routeData = _this$props.routeData,\n          directionData = _this$props.directionData,\n          stopData = _this$props.stopData,\n          showDepartureList = _this$props.showDepartureList,\n          departureList = _this$props.departureList,\n          showStop = _this$props.showStop,\n          showDirection = _this$props.showDirection,\n          showRouteSelection = _this$props.showRouteSelection;\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Real-time Departures\"), React.createElement(\"div\", {\n      className: \"select-box-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, routeData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleRoutChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Select route\"), routeData.map(route => React.createElement(\"option\", {\n      key: route.RouteId,\n      value: route.RouteId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, route.Description))), showDirection && directionData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleDirectionChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Select direction\"), directionData.map(direction => React.createElement(\"option\", {\n      key: direction.DirectionId,\n      value: direction.DirectionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, direction.DirectionName))), showStop && stopData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleStopChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Select stop\"), stopData.map(stop => React.createElement(\"option\", {\n      key: stop.PlaceCode,\n      value: stop.PlaceCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, stop.Description)))), showDepartureList && React.createElement(DepartureList, {\n      departureList: departureList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport const mapStateToProps = state => {\n  const metroData = getMetro(state);\n  console.log(metroData);\n  return {\n    routeData: metroData.routeData,\n    directionData: metroData.directionData,\n    stopData: metroData.stopData,\n    showDepartureList: metroData.showDepartureList,\n    departureList: metroData.departureData,\n    showStop: metroData.showStop,\n    showDirection: metroData.showDirection,\n    showRouteSelection: metroData.showRouteSelection\n  };\n};\nexport const mapDispatchToProps = dispatch => ({\n  onLoadRouteData: routes => dispatch(onLoadRouteAction(routes)),\n  routeChangeAction: directionData => dispatch(routeChangeAction(directionData)),\n  directionChangeAction: stopData => dispatch(directionChangeAction(stopData)),\n  stopChangeAction: departureData => dispatch(stopChangeAction(departureData))\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/a6002489/Desktop/Sathish/caseStudy/metroTransit/src/App.js"],"names":["React","Component","connect","onLoadRouteAction","routeChangeAction","directionChangeAction","stopChangeAction","getMetro","fetchApi","DepartureList","App","constructor","props","handleRoutChange","event","value","target","setState","showDirection","direction","selectedRoute","showStop","departureList","showDepartureList","stop","then","handleDirectionChange","selectedDirection","state","handleStopChange","selectedStop","updateDepartureData","bind","componentDidMount","routes","onLoadRouteData","setInterval","query","render","routeData","directionData","stopData","showRouteSelection","e","map","route","RouteId","Description","DirectionId","DirectionName","PlaceCode","mapStateToProps","metroData","console","log","departureData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , { Component }from 'react';\nimport { connect } from 'react-redux';\nimport { onLoadRouteAction, routeChangeAction, directionChangeAction, stopChangeAction } from './action/simpleAction';\nimport {getMetro} from './duck/metroDuck'\nimport './App.css';\nimport {fetchApi} from './apiCalls'\nimport DepartureList from './departureList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.updateDepartureData = this.updateDepartureData.bind(this)\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => {\n      this.props.onLoadRouteData(routes)\n      this.setState({routes :routes })\n    } )\n    setInterval(this.updateDepartureData, 60000)\n  }\n  // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n  async updateDepartureData() {\n    if(this.state.selectedRoute !== '' && this.state.selectedDirection !== '' && this.state.selectedStop !== '') {\n      const query = this.state.selectedRoute+'/'+this.state.selectedDirection+'/'+this.state.selectedStop\n      fetchApi(query).then(departureList => this.setState({departureList: departureList}))\n    }\n  }\n\n  // Makes the call to get the direction select box data and set/change some default state values\n  handleRoutChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showDirection: false,\n      direction: [],\n      selectedRoute:'',\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n    })\n    this.props.routeChangeAction({\n      showDirection: false,\n      direction: [],\n      selectedRoute:'',\n      stop:[],\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select route') {\n      fetchApi('directions/'+value)\n      .then(direction => {\n        this.props.routeChangeAction({direction :direction, showDirection: true, selectedRoute: value })\n        this.setState({direction :direction, showDirection: true, selectedRoute: value })\n      })\n    } \n  }\n\n  // Makes the call to get the stop select box data and set/change some default state values\n  handleDirectionChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showStop: false,\n      stop: [],\n      selectedDirection: '',\n      departureList: [],\n      showDepartureList: false,\n    })\n    this.props.directionChangeAction({\n      showStop: false,\n      stop: [],\n      selectedDirection: '',\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select direction') {\n      fetchApi('stops/'+this.state.selectedRoute+'/'+value)\n      .then(stop => {\n        this.props.directionChangeAction({stop :stop, showStop: true, selectedDirection: value })\n        this.setState({stop :stop, showStop: true, selectedDirection: value })\n      })\n    } \n  }\n\n  // Makes the call to get the list departure data and set/change some default state values\n  handleStopChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showDepartureList: false,\n      departureList: []\n    })\n    this.props.stopChangeAction({departureList: [], showDepartureList: false})\n    if (value !== 'Select stop') {\n      fetchApi(this.state.selectedRoute+'/'+this.state.selectedDirection+'/'+value)\n      .then(departureList => {\n        this.props.stopChangeAction({departureList: departureList, showDepartureList: true, selectedStop: value})\n        this.setState({departureList: departureList, showDepartureList: true, selectedStop: value})\n      })\n    } \n  }\n\n  render() {\n    // const state = this.state\n    // const routeData = state.routes\n    // const directionData = state.direction\n    // const stopData = state.stop\n    // const departureList = state.departureList\n    const { routeData, directionData, stopData, showDepartureList, departureList, showStop, showDirection, showRouteSelection } = this.props\n    return (\n      <div className=\"App\">\n        <h2 className=\"page-title\">Real-time Departures</h2>\n        <div className=\"select-box-container\">\n        {/* Select the route select box */}\n        { routeData && \n          <select className=\"select-box\" onChange={(e) => this.handleRoutChange(e)}>\n            <option>Select route</option>\n            { routeData.map(route => <option key={route.RouteId} value={route.RouteId}>{route.Description}</option>)}\n          </select> }\n        {/* Select the direction select box */}\n        { (showDirection && directionData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleDirectionChange(e)}>\n            <option>Select direction</option>\n            { directionData.map(direction => <option key={direction.DirectionId} value={direction.DirectionId}>{direction.DirectionName}</option>)}\n          </select>\n        }\n        {/* Select the stop select box */}\n        { (showStop && stopData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleStopChange(e)}>\n            <option>Select stop</option>\n            { stopData.map(stop => <option key={stop.PlaceCode} value={stop.PlaceCode}>{stop.Description}</option>)}\n          </select>\n        }\n        </div>\n        {/* Departure list along with the stop description and stop id */}\n        { showDepartureList && <DepartureList departureList = {departureList} /> }\n      </div>\n    );\n  }\n}\n\nexport const mapStateToProps = state => {\n  const metroData = getMetro(state)\n  console.log(metroData)\n  return {\n    routeData: metroData.routeData,\n    directionData: metroData.directionData,\n    stopData: metroData.stopData,\n    showDepartureList: metroData.showDepartureList,\n    departureList:metroData.departureData,\n    showStop: metroData.showStop,\n    showDirection: metroData.showDirection,\n    showRouteSelection: metroData.showRouteSelection\n }\n}\n\nexport const mapDispatchToProps = dispatch => ({\n  onLoadRouteData: (routes) => dispatch(onLoadRouteAction(routes)),\n  routeChangeAction: (directionData) => dispatch(routeChangeAction(directionData)),\n  directionChangeAction: (stopData) => dispatch(directionChangeAction(stopData)),\n  stopChangeAction: (departureData) => dispatch(stopChangeAction(departureData))\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}