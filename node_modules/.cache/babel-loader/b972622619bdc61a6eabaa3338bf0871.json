{"ast":null,"code":"var _jsxFileName = \"/Users/a6002489/Desktop/Sathish/caseStudy/metroTransit/src/App.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { onLoadRouteAction, routeChangeAction, directionChangeAction, stopChangeAction } from './action/simpleAction';\nimport { getMetro, getRouteData } from './duck/metroDuck';\nimport './App.css';\nimport { fetchApi } from './apiCalls';\nimport DepartureList from './departureList';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleRoutChange = event => {\n      let value = event.target.value;\n      this.setState({\n        showDirection: false,\n        direction: [],\n        selectedRoute: '',\n        showStop: false,\n        departureList: [],\n        showDepartureList: false\n      });\n      this.props.directionData({\n        showDirection: false,\n        direction: [],\n        selectedRoute: '',\n        stop: [],\n        showStop: false,\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select route') {\n        fetchApi('directions/' + value).then(direction => {\n          this.props.directionData({\n            direction: direction,\n            showDirection: true,\n            selectedRoute: value\n          });\n          this.setState({\n            direction: direction,\n            showDirection: true,\n            selectedRoute: value\n          });\n        });\n      }\n    };\n\n    this.handleDirectionChange = event => {\n      let value = event.target.value;\n      this.setState({\n        showStop: false,\n        stop: [],\n        selectedDirection: '',\n        departureList: [],\n        showDepartureList: false\n      });\n      this.props.stopData({\n        showStop: false,\n        stop: [],\n        selectedDirection: '',\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select direction') {\n        fetchApi('stops/' + this.state.selectedRoute + '/' + value).then(stop => {\n          this.props.stopData({\n            stop: stop,\n            showStop: true,\n            selectedDirection: value\n          });\n          this.setState({\n            stop: stop,\n            showStop: true,\n            selectedDirection: value\n          });\n        });\n      }\n    };\n\n    this.handleStopChange = event => {\n      let value = event.target.value;\n      this.setState({\n        showDepartureList: false,\n        departureList: []\n      });\n      this.props.departureData({\n        departureList: [],\n        showDepartureList: false\n      });\n\n      if (value !== 'Select stop') {\n        fetchApi(this.state.selectedRoute + '/' + this.state.selectedDirection + '/' + value).then(departureList => {\n          this.props.departureData({\n            departureList: departureList,\n            showDepartureList: true,\n            selectedStop: value\n          });\n          this.setState({\n            departureList: departureList,\n            showDepartureList: true,\n            selectedStop: value\n          });\n        });\n      }\n    };\n\n    this.updateDepartureData = this.updateDepartureData.bind(this);\n    this.state = {\n      routes: [],\n      selectedRoute: '',\n      direction: [],\n      selectedDirection: '',\n      stop: [],\n      selectedStop: '',\n      showDirection: false,\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n      showRouteSelection: true,\n      showStopSelection: false\n    };\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => {\n      this.props.onLoadRouteData(routes);\n      this.setState({\n        routes: routes\n      });\n    });\n    setInterval(this.updateDepartureData, 60000);\n  } // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n\n\n  async updateDepartureData() {\n    if (this.state.selectedRoute !== '' && this.state.selectedDirection !== '' && this.state.selectedStop !== '') {\n      const query = this.state.selectedRoute + '/' + this.state.selectedDirection + '/' + this.state.selectedStop;\n      fetchApi(query).then(departureList => this.setState({\n        departureList: departureList\n      }));\n    }\n  } // Makes the call to get the direction select box data and set/change some default state values\n\n\n  render(routeData, directionData, stopData, showDepartureList, showStop, showDirection, showRouteSelection) {\n    // const state = this.state\n    // const routeData = state.routes\n    // const directionData = state.direction\n    // const stopData = state.stop\n    // const departureList = state.departureList\n    // const { routeData, directionData, stopData, departureList } = state\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Real-time Departures\"), React.createElement(\"div\", {\n      className: \"select-box-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, routeData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleRoutChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Select route\"), routeData.map(route => React.createElement(\"option\", {\n      key: route.RouteId,\n      value: route.RouteId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, route.Description))), state.showDirection && directionData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleDirectionChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Select direction\"), directionData.map(direction => React.createElement(\"option\", {\n      key: direction.DirectionId,\n      value: direction.DirectionId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, direction.DirectionName))), state.showStop && stopData && React.createElement(\"select\", {\n      className: \"select-box\",\n      onChange: e => this.handleStopChange(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"option\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Select stop\"), stopData.map(stop => React.createElement(\"option\", {\n      key: stop.PlaceCode,\n      value: stop.PlaceCode,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, stop.Description)))), state.showDepartureList && React.createElement(DepartureList, {\n      departureList: departureList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  console.log(getMetro(state));\n  const metroData = getMetro(state);\n  return {\n    routeData: metroData.routeData,\n    directionData: metroData.directionData,\n    stopData: metroData.stopData,\n    showDepartureList: metroData.showDepartureList,\n    showStop: metroData.showStop,\n    showDirection: metroData.showDirection,\n    showRouteSelection: metroData.showRouteSelection\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadRouteData: routes => dispatch(onLoadRouteAction(routes)),\n  directionData: directionData => dispatch(routeChangeAction(directionData)),\n  stopData: stopData => dispatch(directionChangeAction(stopData)),\n  departureData: departureData => dispatch(stopChangeAction(departureData))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/a6002489/Desktop/Sathish/caseStudy/metroTransit/src/App.js"],"names":["React","Component","connect","onLoadRouteAction","routeChangeAction","directionChangeAction","stopChangeAction","getMetro","getRouteData","fetchApi","DepartureList","App","constructor","props","handleRoutChange","event","value","target","setState","showDirection","direction","selectedRoute","showStop","departureList","showDepartureList","directionData","stop","then","handleDirectionChange","selectedDirection","stopData","state","handleStopChange","departureData","selectedStop","updateDepartureData","bind","routes","showRouteSelection","showStopSelection","componentDidMount","onLoadRouteData","setInterval","query","render","routeData","e","map","route","RouteId","Description","DirectionId","DirectionName","PlaceCode","mapStateToProps","console","log","metroData","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React , { Component }from 'react';\nimport { connect } from 'react-redux';\nimport { onLoadRouteAction, routeChangeAction, directionChangeAction, stopChangeAction } from './action/simpleAction';\nimport {getMetro, getRouteData} from './duck/metroDuck'\nimport './App.css';\nimport {fetchApi} from './apiCalls'\nimport DepartureList from './departureList'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.updateDepartureData = this.updateDepartureData.bind(this)\n    this.state = {\n      routes : [],\n      selectedRoute: '',\n      direction: [],\n      selectedDirection: '',\n      stop: [],\n      selectedStop: '',\n      showDirection: false,\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n      showRouteSelection: true,\n      showStopSelection: false\n    }\n  }\n\n  componentDidMount() {\n    fetchApi('routes').then(routes => {\n      this.props.onLoadRouteData(routes)\n      this.setState({routes :routes })\n    } )\n    setInterval(this.updateDepartureData, 60000)\n  }\n  // Makes the call every 1 min only when there is selectedRoute, selectedDirection, selectedStop\n  async updateDepartureData() {\n    if(this.state.selectedRoute !== '' && this.state.selectedDirection !== '' && this.state.selectedStop !== '') {\n      const query = this.state.selectedRoute+'/'+this.state.selectedDirection+'/'+this.state.selectedStop\n      fetchApi(query).then(departureList => this.setState({departureList: departureList}))\n    }\n  }\n\n  // Makes the call to get the direction select box data and set/change some default state values\n  handleRoutChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showDirection: false,\n      direction: [],\n      selectedRoute:'',\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n    })\n    this.props.directionData({\n      showDirection: false,\n      direction: [],\n      selectedRoute:'',\n      stop:[],\n      showStop: false,\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select route') {\n      fetchApi('directions/'+value)\n      .then(direction => {\n        this.props.directionData({direction :direction, showDirection: true, selectedRoute: value })\n        this.setState({direction :direction, showDirection: true, selectedRoute: value })\n      })\n    } \n  }\n\n  // Makes the call to get the stop select box data and set/change some default state values\n  handleDirectionChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showStop: false,\n      stop: [],\n      selectedDirection: '',\n      departureList: [],\n      showDepartureList: false,\n    })\n    this.props.stopData({\n      showStop: false,\n      stop: [],\n      selectedDirection: '',\n      departureList: [],\n      showDepartureList: false,\n    })\n    if (value !== 'Select direction') {\n      fetchApi('stops/'+this.state.selectedRoute+'/'+value)\n      .then(stop => {\n        this.props.stopData({stop :stop, showStop: true, selectedDirection: value })\n        this.setState({stop :stop, showStop: true, selectedDirection: value })\n      })\n    } \n  }\n\n  // Makes the call to get the list departure data and set/change some default state values\n  handleStopChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      showDepartureList: false,\n      departureList: []\n    })\n    this.props.departureData({departureList: [], showDepartureList: false})\n    if (value !== 'Select stop') {\n      fetchApi(this.state.selectedRoute+'/'+this.state.selectedDirection+'/'+value)\n      .then(departureList => {\n        this.props.departureData({departureList: departureList, showDepartureList: true, selectedStop: value})\n        this.setState({departureList: departureList, showDepartureList: true, selectedStop: value})\n      })\n    } \n  }\n\n  render(routeData, directionData, stopData, showDepartureList, showStop, showDirection, showRouteSelection) {\n    // const state = this.state\n    // const routeData = state.routes\n    // const directionData = state.direction\n    // const stopData = state.stop\n    // const departureList = state.departureList\n    // const { routeData, directionData, stopData, departureList } = state\n    return (\n      <div className=\"App\">\n        <h2 className=\"page-title\">Real-time Departures</h2>\n        <div className=\"select-box-container\">\n        {/* Select the route select box */}\n        { routeData && \n          <select className=\"select-box\" onChange={(e) => this.handleRoutChange(e)}>\n            <option>Select route</option>\n            { routeData.map(route => <option key={route.RouteId} value={route.RouteId}>{route.Description}</option>)}\n          </select> }\n        {/* Select the direction select box */}\n        { (state.showDirection && directionData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleDirectionChange(e)}>\n            <option>Select direction</option>\n            { directionData.map(direction => <option key={direction.DirectionId} value={direction.DirectionId}>{direction.DirectionName}</option>)}\n          </select>\n        }\n        {/* Select the stop select box */}\n        { (state.showStop && stopData) &&\n          <select className=\"select-box\" onChange={(e) => this.handleStopChange(e)}>\n            <option>Select stop</option>\n            { stopData.map(stop => <option key={stop.PlaceCode} value={stop.PlaceCode}>{stop.Description}</option>)}\n          </select>\n        }\n        </div>\n        {/* Departure list along with the stop description and stop id */}\n        { state.showDepartureList && <DepartureList departureList = {departureList} /> }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  console.log(getMetro(state))\n  const metroData = getMetro(state)\n  return {\n    routeData: metroData.routeData,\n    directionData: metroData.directionData,\n    stopData: metroData.stopData,\n    showDepartureList: metroData.showDepartureList,\n    showStop: metroData.showStop,\n    showDirection: metroData.showDirection,\n    showRouteSelection: metroData.showRouteSelection\n }\n}\n\n const mapDispatchToProps = dispatch => ({\n  onLoadRouteData: (routes) => dispatch(onLoadRouteAction(routes)),\n  directionData: (directionData) => dispatch(routeChangeAction(directionData)),\n  stopData: (stopData) => dispatch(directionChangeAction(stopData)),\n  departureData: (departureData) => dispatch(stopChangeAction(departureData))\n })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}